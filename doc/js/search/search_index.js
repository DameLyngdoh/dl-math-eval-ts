var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/DMEReferenceToken.html",[0,0.121,1,1.215]],["body/classes/DMEReferenceToken.html",[0,0.145,1,1.835,2,0.434,3,0.65,4,0.534,5,0.798,6,1.198,7,0.811,8,1.465,9,1.718,10,0.981,11,1.835,12,2.242,13,2.361,14,1.821,15,0.347,16,0.988,17,2.013,18,2.855,19,2.855,20,2.202,21,1.2,22,1.194,23,1.772,24,1.2,25,3.116,26,3.211,27,0.995,28,1.451,29,1.718,30,2.361,31,0.078,32,2.242,33,1.772,34,1.194,35,1.554,36,1.618,37,1.821,38,0.988,39,1.908,40,1.554,41,1.465,42,1.329,43,2.361,44,2.361,45,3.19,46,1.821,47,3.167,48,2.361,49,1.554,50,0.766,51,1.554,52,1.821,53,3.868,54,1.334,55,1.821,56,1.465,57,1.621,58,1.821,59,1.2,60,2.361,61,2.361,62,1.57,63,1.554,64,1.554,65,1.554,66,1.554,67,1.451,68,1.554,69,1.554,70,1.554,71,1.554,72,1.198,73,1.554,74,1.198,75,1.554,76,0.988,77,1.554,78,0.65,79,1.096,80,2.361,81,2.361,82,1.821,83,1.451,84,1.772,85,0.964,86,0.79,87,0.534,88,1.554,89,1.554,90,1.554,91,1.554,92,0.025,93,0.038,94,0.025]],["title/classes/DMEToken.html",[0,0.121,50,0.534]],["body/classes/DMEToken.html",[0,0.162,2,0.525,3,0.786,4,0.646,5,0.525,7,0.934,8,1.688,10,1.533,15,0.42,16,1.138,17,1.968,20,2.464,21,1.382,22,1.336,23,1.983,24,1.382,27,1.019,28,1.624,29,1.71,31,0.078,34,1.915,36,1.336,42,1.098,50,0.865,52,2.098,54,1.138,55,2.098,57,1.624,62,1.62,67,1.382,72,1.45,74,1.45,76,0.786,78,0.786,79,1.098,82,2.464,83,1.382,84,1.688,85,1.983,86,0.955,87,0.646,92,0.031,93,0.044,94,0.031,95,1.45,96,2.719,97,3.195,98,2.719,99,3.305,100,1.88,101,2.719,102,2.098,103,2.098,104,2.719,105,1.382,106,1.779,107,1.688,108,1.382,109,2.719,110,1.88,111,1.88,112,1.88,113,1.88,114,1.88,115,1.88,116,1.88,117,1.88,118,1.88,119,1.45,120,3.195,121,1.88,122,1.88,123,1.88]],["title/classes/ProcessingResult.html",[0,0.121,124,1.484]],["body/classes/ProcessingResult.html",[0,0.177,2,0.62,3,0.928,4,0.762,5,0.62,7,0.762,9,1.709,10,1.533,15,1.004,16,1.279,17,2.077,24,1.554,27,0.781,28,1.777,29,1.752,31,0.077,36,1.279,38,1.577,42,1.05,50,0.913,54,1.279,56,1.898,57,1.554,62,1.279,67,1.554,76,0.928,78,0.928,79,1.05,83,1.128,87,0.762,92,0.057,93,0.05,94,0.036,105,2.227,107,1.898,108,1.554,124,1.898,125,1.712,126,2.358,127,2.358,128,2.358,129,3.057,130,3.057,131,2.358,132,2.698,133,3.498,134,3.057,135,2.219,136,3.057,137,3.057,138,1.712,139,2.219,140,1.712,141,2.219,142,2.219,143,2.219,144,2.219,145,2.219,146,2.358,147,1.377,148,3.057,149,2.219]],["title/classes/RegexContainer.html",[0,0.121,150,1.215]],["body/classes/RegexContainer.html",[0,0.096,2,0.527,3,0.789,4,0.648,5,0.527,7,0.648,9,1.622,15,0.422,16,1.141,22,1.91,25,2.469,27,0.893,29,1.672,31,0.078,33,2.481,34,1.672,38,1.141,41,1.692,42,1.332,78,0.789,86,2.031,92,0.031,93,0.044,94,0.031,108,1.386,150,1.386,151,1.171,152,1.987,153,1.171,154,1.455,155,1.455,156,4.565,157,3.202,158,3.72,159,3.202,160,1.987,161,3.202,162,3.202,163,3.4,164,1.887,165,2.727,166,2.705,167,1.692,168,2.103,169,1.887,170,1.887,171,2.727,172,1.887,173,2.103,174,2.54,175,2.99,176,2.103,177,2.727,178,1.887,179,2.99,180,2.727,181,1.887,182,2.103,183,2.103,184,1.887,185,2.727,186,2.103]],["title/classes/SubTokenizerResult.html",[0,0.121,187,1.484]],["body/classes/SubTokenizerResult.html",[0,0.162,2,0.527,3,0.789,4,0.648,5,0.527,7,0.937,8,1.692,10,0.937,15,1.003,16,1.141,17,1.97,21,1.386,22,1.339,23,1.987,24,1.386,27,0.831,28,1.627,29,1.712,31,0.078,32,2.177,36,1.339,37,2.103,38,1.141,39,1.97,42,1.1,50,0.932,54,1.467,57,1.627,62,1.622,67,1.386,76,0.789,78,0.789,79,1.1,83,1.386,84,1.692,86,0.959,87,0.648,92,0.052,93,0.044,94,0.031,105,1.97,106,2.256,128,2.705,132,2.469,138,1.455,140,1.455,146,2.469,147,1.171,187,2.628,188,1.455,189,4.093,190,2.727,191,2.727,192,3.202,193,2.727,194,1.887,195,1.887,196,1.887,197,2.727,198,2.727,199,2.103,200,1.887,201,1.887,202,1.887,203,1.887,204,1.887,205,1.887,206,3.202,207,1.887,208,1.887]],["title/coverage.html",[209,2.481]],["body/coverage.html",[0,0.228,1,1.586,5,0.872,6,2.407,27,0.697,31,0.075,50,0.697,87,1.072,92,0.051,93,0.062,94,0.051,95,2.407,124,1.937,125,2.407,150,1.586,151,1.937,187,1.937,188,2.407,209,2.407,210,1.937,211,3.121,212,3.121,213,3.121,214,3.121,215,3.818,216,3.818,217,3.121,218,2.407,219,4.124,220,3.121,221,3.121,222,3.121,223,3.121,224,1.937,225,3.121,226,1.937,227,3.121,228,3.121,229,1.937]],["title/dependencies.html",[230,2.02,231,2.209]],["body/dependencies.html",[31,0.071,92,0.059,93,0.068,94,0.059,231,2.791,232,2.791,233,3.619,234,2.791,235,3.619]],["title/miscellaneous/enumerations.html",[236,1.027,237,2.209]],["body/miscellaneous/enumerations.html",[9,1.84,10,1.46,11,1.7,12,2.077,15,0.748,27,0.748,31,0.065,47,3.071,92,0.054,93,0.065,94,0.054,99,3.071,103,2.581,106,1.7,160,2.077,236,1.7,237,2.581,238,3.981,239,3.981,240,3.346,241,3.346,242,2.581,243,2.581,244,2.581]],["title/index.html",[15,0.451,245,1.254,246,1.558]],["body/index.html",[0,0.128,1,0.866,2,0.288,4,0.869,5,0.288,7,0.586,9,1.664,10,1.33,11,2.044,12,1.352,14,0.795,21,1.424,22,0.431,26,2.329,27,0.487,31,0.077,32,1.874,34,0.713,36,0.911,38,1.786,39,1.624,41,0.64,42,1.037,46,0.795,50,0.23,54,1.263,56,1.058,59,1.107,62,0.431,76,0.713,79,0.963,85,0.64,92,0.035,93,0.028,94,0.035,105,1.936,106,1.424,107,0.64,108,1.286,126,0.795,127,1.681,131,0.795,147,0.64,150,0.524,151,0.64,152,1.352,153,1.352,154,1.952,155,1.952,160,1.058,166,1.681,167,1.058,168,0.795,173,1.681,174,1.571,175,1.681,176,0.795,179,2.672,182,2.162,186,0.795,199,1.315,210,1.571,218,1.315,224,0.64,226,0.64,229,0.64,232,0.795,234,1.315,242,0.795,243,0.795,244,0.795,245,0.64,247,1.031,248,3.019,249,1.031,250,3.195,251,2.179,252,1.705,253,1.031,254,2.531,255,2.179,256,2.179,257,1.705,258,1.031,259,1.705,260,2.179,261,1.031,262,1.031,263,2.803,264,1.031,265,3.195,266,2.179,267,1.705,268,1.705,269,1.031,270,1.705,271,1.031,272,1.031,273,1.705,274,1.031,275,1.031,276,1.031,277,1.705,278,1.705,279,1.031,280,1.031,281,1.031,282,1.031,283,1.031,284,1.031,285,3.019,286,1.031,287,1.031,288,1.031,289,1.031,290,2.179,291,3.019,292,1.031,293,1.031,294,1.705,295,1.031,296,1.031,297,1.031,298,1.031,299,1.031,300,1.031,301,1.031,302,1.031,303,1.031,304,1.705,305,1.031,306,1.031,307,1.031,308,1.705,309,1.031,310,1.031,311,1.031,312,1.031,313,1.031,314,1.031,315,1.031,316,2.531,317,1.031,318,1.031,319,2.179,320,1.705,321,1.031,322,1.031,323,1.031,324,1.031,325,1.031,326,1.031,327,1.031,328,1.031,329,3.341,330,1.031,331,1.031,332,1.031,333,1.705,334,3.195,335,1.031,336,1.705,337,2.179,338,2.531,339,1.031,340,1.705,341,1.705,342,1.031,343,1.031,344,2.179,345,1.031,346,0.795,347,1.681,348,1.705,349,1.705,350,1.705,351,2.179,352,1.705,353,1.031,354,1.031,355,2.531,356,1.031,357,1.031,358,1.031,359,1.705,360,1.031,361,1.031,362,1.031,363,1.031,364,1.031,365,1.705,366,2.179,367,1.031,368,1.705,369,1.031,370,1.031,371,1.031,372,1.031,373,1.031,374,1.031,375,1.031,376,1.031,377,1.031,378,1.705,379,2.179,380,1.705,381,2.179,382,1.031,383,1.031,384,1.705,385,1.031,386,1.705,387,1.031,388,1.705,389,1.031,390,1.031,391,1.705,392,2.179,393,1.031,394,1.031,395,1.031,396,1.031,397,1.031,398,1.031,399,1.031,400,1.031,401,2.179,402,1.031,403,1.031,404,1.031,405,1.705,406,1.031,407,1.031,408,1.031,409,1.031,410,1.031,411,1.031,412,1.031,413,1.031,414,1.031,415,1.031,416,1.031,417,1.031,418,1.031,419,1.031,420,1.031,421,1.952,422,1.315,423,1.031,424,0.795,425,0.795,426,0.795,427,1.031,428,1.031,429,1.031,430,1.031,431,1.031,432,1.031,433,1.031,434,1.031,435,1.031,436,0.795,437,1.031,438,1.031,439,1.031,440,1.031,441,1.031,442,1.031,443,2.531,444,1.031,445,1.031,446,1.031,447,1.705,448,1.031,449,1.031,450,1.705,451,1.031,452,1.031,453,1.031,454,1.031,455,1.031,456,1.031,457,1.031,458,1.031,459,1.031,460,1.031,461,1.031,462,2.179,463,1.031,464,1.031,465,1.031]],["title/license.html",[245,1.254,246,1.558,466,1.558]],["body/license.html",[31,0.058,58,2.73,59,1.799,92,0.045,93,0.058,94,0.045,210,1.717,346,2.133,347,2.133,426,2.133,466,2.133,467,2.766,468,3.904,469,2.766,470,2.766,471,2.766,472,2.766,473,3.54,474,2.766,475,2.766,476,2.766,477,2.766,478,2.766,479,2.766,480,3.54,481,4.524,482,2.766,483,2.766,484,2.766,485,3.904,486,2.766,487,2.766,488,2.766,489,2.766,490,2.766,491,2.766,492,2.766,493,2.766,494,2.766,495,2.766,496,3.54,497,2.766,498,2.766,499,2.766,500,2.766,501,2.766,502,3.54,503,3.54,504,2.766,505,2.766,506,2.766,507,2.766,508,2.766,509,2.766,510,2.766,511,2.766,512,2.766,513,2.766,514,2.766,515,2.766,516,2.766,517,2.766,518,2.766,519,2.766,520,2.766,521,2.766,522,2.766,523,2.766,524,2.766,525,2.766,526,2.766,527,2.766,528,2.766,529,2.766,530,2.766,531,2.766,532,2.766,533,2.766]],["title/modules.html",[534,2.481]],["body/modules.html",[31,0.069,92,0.06,93,0.069,94,0.06,534,2.842]],["title/overview.html",[535,2.481]],["body/overview.html",[2,1.022,31,0.068,92,0.06,93,0.068,94,0.06,535,2.821,536,3.658]],["title/miscellaneous/variables.html",[236,1.027,537,2.209]],["body/miscellaneous/variables.html",[11,1.402,15,0.616,31,0.078,33,2.193,34,1.478,39,1.402,50,0.616,59,1.402,79,0.948,87,0.948,92,0.045,93,0.058,94,0.045,102,2.128,119,2.128,152,1.712,153,1.712,163,2.128,167,2.42,174,2.193,183,2.725,224,2.193,226,2.193,229,1.712,236,1.402,421,2.128,422,2.128,424,3.278,425,2.128,436,2.128,537,2.128,538,2.759,539,2.759,540,4.348,541,2.759,542,4.25,543,2.759,544,3.534,545,2.759,546,2.759,547,2.759,548,3.534,549,2.759,550,2.759,551,2.759,552,2.759,553,2.759,554,2.759,555,2.759]]],"invertedIndex":[["",{"_index":31,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":167,"title":{},"body":{"classes/RegexContainer.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":147,"title":{},"body":{"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{},"index.html":{}}}],["1+1.1)/2+$f.$r.w_t_($f.x(2),3",{"_index":457,"title":{},"body":{"index.html":{}}}],["1.0.0",{"_index":235,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":227,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":219,"title":{},"body":{"coverage.html":{}}}],["101",{"_index":361,"title":{},"body":{"index.html":{}}}],["14/14",{"_index":220,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":401,"title":{},"body":{"index.html":{}}}],["2019",{"_index":470,"title":{},"body":{"license.html":{}}}],["3/4",{"_index":222,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":216,"title":{},"body":{"coverage.html":{}}}],["5+1",{"_index":363,"title":{},"body":{"index.html":{}}}],["5/6",{"_index":214,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":536,"title":{},"body":{"overview.html":{}}}],["75",{"_index":221,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":223,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":215,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":213,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":168,"title":{},"body":{"classes/RegexContainer.html":{},"index.html":{}}}],["9$_",{"_index":180,"title":{},"body":{"classes/RegexContainer.html":{}}}],["9$_.]$/|referencenamecharacters|the",{"_index":418,"title":{},"body":{"index.html":{}}}],["9]$/|digit|all",{"_index":404,"title":{},"body":{"index.html":{}}}],["9_",{"_index":177,"title":{},"body":{"classes/RegexContainer.html":{}}}],["9_$]+(\\.[a",{"_index":176,"title":{},"body":{"classes/RegexContainer.html":{},"index.html":{}}}],["9_$]+)*)$/|referencename|a",{"_index":412,"title":{},"body":{"index.html":{}}}],["9a",{"_index":544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_",{"_index":417,"title":{},"body":{"index.html":{}}}],["_index",{"_index":132,"title":{},"body":{"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{}}}],["_params",{"_index":18,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["_referencename",{"_index":19,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["_token",{"_index":133,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["_tokens",{"_index":192,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["_type",{"_index":20,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{}}}],["_value",{"_index":97,"title":{},"body":{"classes/DMEToken.html":{}}}],["above",{"_index":346,"title":{},"body":{"index.html":{},"license.html":{}}}],["absolute",{"_index":44,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["accessors",{"_index":24,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{}}}],["accordingly",{"_index":264,"title":{},"body":{"index.html":{}}}],["action",{"_index":526,"title":{},"body":{"license.html":{}}}],["add",{"_index":262,"title":{},"body":{"index.html":{}}}],["addition",{"_index":408,"title":{},"body":{"index.html":{}}}],["against",{"_index":554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["algorithm",{"_index":443,"title":{},"body":{"index.html":{}}}],["alongwith",{"_index":129,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["analogous",{"_index":43,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["and/or",{"_index":494,"title":{},"body":{"license.html":{}}}],["api",{"_index":454,"title":{},"body":{"index.html":{}}}],["appropriate",{"_index":283,"title":{},"body":{"index.html":{}}}],["argument",{"_index":353,"title":{},"body":{"index.html":{}}}],["arguments",{"_index":341,"title":{},"body":{"index.html":{}}}],["arising",{"_index":530,"title":{},"body":{"license.html":{}}}],["arithmetic",{"_index":252,"title":{},"body":{"index.html":{}}}],["array",{"_index":32,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/SubTokenizerResult.html":{},"index.html":{}}}],["arry",{"_index":61,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["associated",{"_index":482,"title":{},"body":{"license.html":{}}}],["authors",{"_index":520,"title":{},"body":{"license.html":{}}}],["before",{"_index":378,"title":{},"body":{"index.html":{}}}],["being",{"_index":399,"title":{},"body":{"index.html":{}}}],["below",{"_index":308,"title":{},"body":{"index.html":{}}}],["better",{"_index":302,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["both",{"_index":385,"title":{},"body":{"index.html":{}}}],["break",{"_index":542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":268,"title":{},"body":{"index.html":{}}}],["c",{"_index":469,"title":{},"body":{"license.html":{}}}],["call",{"_index":316,"title":{},"body":{"index.html":{}}}],["case",{"_index":424,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["catch(ex",{"_index":552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cd",{"_index":272,"title":{},"body":{"index.html":{}}}],["character",{"_index":108,"title":{},"body":{"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"index.html":{}}}],["characters",{"_index":182,"title":{},"body":{"classes/RegexContainer.html":{},"index.html":{}}}],["charge",{"_index":477,"title":{},"body":{"license.html":{}}}],["check",{"_index":422,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["claim",{"_index":523,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{}},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{},"index.html":{},"overview.html":{}}}],["clone",{"_index":260,"title":{},"body":{"index.html":{}}}],["close",{"_index":165,"title":{},"body":{"classes/RegexContainer.html":{}}}],["closeparenthesis",{"_index":243,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["closingparenthesis",{"_index":157,"title":{},"body":{"classes/RegexContainer.html":{}}}],["closingparenthesis|close",{"_index":403,"title":{},"body":{"index.html":{}}}],["code",{"_index":266,"title":{},"body":{"index.html":{}}}],["common",{"_index":391,"title":{},"body":{"index.html":{}}}],["compiler",{"_index":275,"title":{},"body":{"index.html":{}}}],["complete",{"_index":41,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/RegexContainer.html":{},"index.html":{}}}],["compodoc",{"_index":455,"title":{},"body":{"index.html":{}}}],["concept",{"_index":430,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":501,"title":{},"body":{"license.html":{}}}],["connection",{"_index":532,"title":{},"body":{"license.html":{}}}],["constant",{"_index":12,"title":{},"body":{"classes/DMEReferenceToken.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["constructor",{"_index":28,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{}}}],["contained",{"_index":131,"title":{},"body":{"classes/ProcessingResult.html":{},"index.html":{}}}],["containing",{"_index":332,"title":{},"body":{"index.html":{}}}],["contains",{"_index":104,"title":{},"body":{"classes/DMEToken.html":{}}}],["contract",{"_index":527,"title":{},"body":{"license.html":{}}}],["conventions",{"_index":305,"title":{},"body":{"index.html":{}}}],["copies",{"_index":496,"title":{},"body":{"license.html":{}}}],["copy",{"_index":480,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":468,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":270,"title":{},"body":{"index.html":{}}}],["course",{"_index":396,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":209,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["current",{"_index":433,"title":{},"body":{"index.html":{}}}],["currenttoken",{"_index":436,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["currenttoken|dmetoken|the",{"_index":432,"title":{},"body":{"index.html":{}}}],["damages",{"_index":524,"title":{},"body":{"license.html":{}}}],["dame",{"_index":471,"title":{},"body":{"license.html":{}}}],["deal",{"_index":484,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":533,"title":{},"body":{"license.html":{}}}],["declaration",{"_index":356,"title":{},"body":{"index.html":{}}}],["declared",{"_index":342,"title":{},"body":{"index.html":{}}}],["default",{"_index":33,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/RegexContainer.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":29,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{}}}],["definitions",{"_index":292,"title":{},"body":{"index.html":{}}}],["delimited",{"_index":371,"title":{},"body":{"index.html":{}}}],["demo",{"_index":456,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":231,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depends",{"_index":324,"title":{},"body":{"index.html":{}}}],["depth",{"_index":383,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{},"index.html":{}}}],["descriptions",{"_index":311,"title":{},"body":{"index.html":{}}}],["digit",{"_index":158,"title":{},"body":{"classes/RegexContainer.html":{}}}],["digits",{"_index":405,"title":{},"body":{"index.html":{}}}],["discover",{"_index":301,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":492,"title":{},"body":{"license.html":{}}}],["division",{"_index":411,"title":{},"body":{"index.html":{}}}],["dl",{"_index":232,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["dlmatheval",{"_index":218,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dlmatheval.evaluateexpression",{"_index":293,"title":{},"body":{"index.html":{}}}],["dlmatheval.evaluateexpression(exp",{"_index":465,"title":{},"body":{"index.html":{}}}],["dlmatheval.tokenize(exp",{"_index":464,"title":{},"body":{"index.html":{}}}],["dlmatheval.ts",{"_index":217,"title":{},"body":{"coverage.html":{}}}],["dmereferencetoken",{"_index":1,"title":{"classes/DMEReferenceToken.html":{}},"body":{"classes/DMEReferenceToken.html":{},"coverage.html":{},"index.html":{}}}],["dmereferencetoken.ts",{"_index":6,"title":{},"body":{"classes/DMEReferenceToken.html":{},"coverage.html":{}}}],["dmereferencetoken.ts:12",{"_index":40,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["dmereferencetoken.ts:17",{"_index":35,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["dmereferencetoken.ts:22",{"_index":30,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["dmereferencetoken.ts:26",{"_index":64,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["dmereferencetoken.ts:29",{"_index":69,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["dmereferencetoken.ts:32",{"_index":73,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["dmereferencetoken.ts:36",{"_index":66,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["dmereferencetoken.ts:39",{"_index":71,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["dmereferencetoken.ts:42",{"_index":75,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["dmereferencetoken.ts:54",{"_index":51,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["dmetoken",{"_index":50,"title":{"classes/DMEToken.html":{}},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["dmetoken.ts",{"_index":95,"title":{},"body":{"classes/DMEToken.html":{},"coverage.html":{}}}],["dmetoken.ts:10",{"_index":100,"title":{},"body":{"classes/DMEToken.html":{}}}],["dmetoken.ts:15",{"_index":98,"title":{},"body":{"classes/DMEToken.html":{}}}],["dmetoken.ts:22",{"_index":112,"title":{},"body":{"classes/DMEToken.html":{}}}],["dmetoken.ts:25",{"_index":115,"title":{},"body":{"classes/DMEToken.html":{}}}],["dmetoken.ts:29",{"_index":113,"title":{},"body":{"classes/DMEToken.html":{}}}],["dmetoken.ts:32",{"_index":117,"title":{},"body":{"classes/DMEToken.html":{}}}],["dmetoken.ts:43",{"_index":111,"title":{},"body":{"classes/DMEToken.html":{}}}],["dmetokentype",{"_index":99,"title":{},"body":{"classes/DMEToken.html":{},"miscellaneous/enumerations.html":{}}}],["dmetokentype.closeparenthesis",{"_index":546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dmetokentype.enum",{"_index":118,"title":{},"body":{"classes/DMEToken.html":{}}}],["dmetokentype.enum.ts",{"_index":238,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dmetokentype.openparenthesis",{"_index":545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dmetokentype.operand",{"_index":119,"title":{},"body":{"classes/DMEToken.html":{},"miscellaneous/variables.html":{}}}],["dmetokentype.operator",{"_index":543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dmetokentype.reference",{"_index":547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doc/index.html",{"_index":453,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":210,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["download",{"_index":261,"title":{},"body":{"index.html":{}}}],["elaborations",{"_index":312,"title":{},"body":{"index.html":{}}}],["element",{"_index":315,"title":{},"body":{"index.html":{}}}],["empty",{"_index":60,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["encourage",{"_index":299,"title":{},"body":{"index.html":{}}}],["end",{"_index":136,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["ending",{"_index":128,"title":{},"body":{"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{}}}],["entity",{"_index":335,"title":{},"body":{"index.html":{}}}],["enum",{"_index":103,"title":{},"body":{"classes/DMEToken.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":237,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error('unrecognized",{"_index":549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eval",{"_index":257,"title":{},"body":{"index.html":{}}}],["evaluate",{"_index":287,"title":{},"body":{"index.html":{}}}],["evaluated",{"_index":380,"title":{},"body":{"index.html":{}}}],["evaluateexpression",{"_index":345,"title":{},"body":{"index.html":{}}}],["evaluatenativeexpression",{"_index":448,"title":{},"body":{"index.html":{}}}],["evaluates",{"_index":444,"title":{},"body":{"index.html":{}}}],["evaluating",{"_index":251,"title":{},"body":{"index.html":{}}}],["evaluation",{"_index":379,"title":{},"body":{"index.html":{}}}],["evaluator",{"_index":249,"title":{},"body":{"index.html":{}}}],["even",{"_index":398,"title":{},"body":{"index.html":{}}}],["event",{"_index":519,"title":{},"body":{"license.html":{}}}],["ex",{"_index":553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":285,"title":{},"body":{"index.html":{}}}],["exp",{"_index":290,"title":{},"body":{"index.html":{}}}],["explanatory",{"_index":442,"title":{},"body":{"index.html":{}}}],["explore",{"_index":300,"title":{},"body":{"index.html":{}}}],["export",{"_index":78,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{}}}],["express",{"_index":510,"title":{},"body":{"license.html":{}}}],["expressed",{"_index":375,"title":{},"body":{"index.html":{}}}],["expression",{"_index":38,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{},"index.html":{}}}],["expressions",{"_index":153,"title":{},"body":{"classes/RegexContainer.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["f",{"_index":459,"title":{},"body":{"index.html":{}}}],["f1",{"_index":348,"title":{},"body":{"index.html":{}}}],["f1.f2.f3(2,1",{"_index":339,"title":{},"body":{"index.html":{}}}],["f1.f2.f3(2,3",{"_index":387,"title":{},"body":{"index.html":{}}}],["f1.f2.f3(4,5",{"_index":364,"title":{},"body":{"index.html":{}}}],["f1.f2.f4",{"_index":365,"title":{},"body":{"index.html":{}}}],["f1.notafunction",{"_index":366,"title":{},"body":{"index.html":{}}}],["f2",{"_index":349,"title":{},"body":{"index.html":{}}}],["f3",{"_index":350,"title":{},"body":{"index.html":{}}}],["f4",{"_index":360,"title":{},"body":{"index.html":{}}}],["fails",{"_index":397,"title":{},"body":{"index.html":{}}}],["false",{"_index":438,"title":{},"body":{"index.html":{}}}],["few",{"_index":313,"title":{},"body":{"index.html":{}}}],["field",{"_index":374,"title":{},"body":{"index.html":{}}}],["fields",{"_index":56,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/ProcessingResult.html":{},"index.html":{}}}],["field|type|description",{"_index":320,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":483,"title":{},"body":{"license.html":{}}}],["find",{"_index":297,"title":{},"body":{"index.html":{}}}],["first",{"_index":381,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":515,"title":{},"body":{"license.html":{}}}],["followed",{"_index":306,"title":{},"body":{"index.html":{}}}],["following",{"_index":347,"title":{},"body":{"index.html":{},"license.html":{}}}],["form",{"_index":388,"title":{},"body":{"index.html":{}}}],["forms",{"_index":428,"title":{},"body":{"index.html":{}}}],["found",{"_index":392,"title":{},"body":{"index.html":{}}}],["free",{"_index":476,"title":{},"body":{"license.html":{}}}],["function",{"_index":11,"title":{},"body":{"classes/DMEReferenceToken.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["furnished",{"_index":499,"title":{},"body":{"license.html":{}}}],["general",{"_index":96,"title":{},"body":{"classes/DMEToken.html":{}}}],["generate",{"_index":269,"title":{},"body":{"index.html":{}}}],["generated",{"_index":199,"title":{},"body":{"classes/SubTokenizerResult.html":{},"index.html":{}}}],["getindex",{"_index":138,"title":{},"body":{"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{}}}],["getinstance",{"_index":23,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/SubTokenizerResult.html":{}}}],["getinstance(referencename",{"_index":49,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["getinstance(tokens",{"_index":195,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["getinstance(type",{"_index":110,"title":{},"body":{"classes/DMEToken.html":{}}}],["getparams",{"_index":68,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["getreferencename",{"_index":63,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["gets",{"_index":197,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["getting",{"_index":245,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["gettoken",{"_index":142,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["gettokens",{"_index":200,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["gettype",{"_index":72,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{}}}],["getvalue",{"_index":114,"title":{},"body":{"classes/DMEToken.html":{}}}],["git",{"_index":267,"title":{},"body":{"index.html":{}}}],["github",{"_index":258,"title":{},"body":{"index.html":{}}}],["granted",{"_index":475,"title":{},"body":{"license.html":{}}}],["help",{"_index":309,"title":{},"body":{"index.html":{}}}],["here",{"_index":310,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":474,"title":{},"body":{"license.html":{}}}],["hold",{"_index":323,"title":{},"body":{"index.html":{}}}],["holders",{"_index":521,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":211,"title":{},"body":{"coverage.html":{}}}],["implementation",{"_index":429,"title":{},"body":{"index.html":{}}}],["implements",{"_index":449,"title":{},"body":{"index.html":{}}}],["implied",{"_index":511,"title":{},"body":{"license.html":{}}}],["import",{"_index":76,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{},"index.html":{}}}],["imports",{"_index":284,"title":{},"body":{"index.html":{}}}],["include",{"_index":377,"title":{},"body":{"index.html":{}}}],["included",{"_index":504,"title":{},"body":{"license.html":{}}}],["including",{"_index":58,"title":{},"body":{"classes/DMEReferenceToken.html":{},"license.html":{}}}],["independent",{"_index":314,"title":{},"body":{"index.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":101,"title":{},"body":{"classes/DMEToken.html":{}}}],["infix",{"_index":445,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{}}}],["information",{"_index":280,"title":{},"body":{"index.html":{}}}],["initial",{"_index":185,"title":{},"body":{"classes/RegexContainer.html":{}}}],["install",{"_index":295,"title":{},"body":{"index.html":{}}}],["installation",{"_index":253,"title":{},"body":{"index.html":{}}}],["installed",{"_index":276,"title":{},"body":{"index.html":{}}}],["instance",{"_index":198,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["instantiates",{"_index":52,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{}}}],["intuitively",{"_index":386,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":439,"title":{},"body":{"index.html":{}}}],["iteration",{"_index":434,"title":{},"body":{"index.html":{}}}],["itself",{"_index":109,"title":{},"body":{"classes/DMEToken.html":{}}}],["js",{"_index":271,"title":{},"body":{"index.html":{}}}],["json",{"_index":14,"title":{},"body":{"classes/DMEReferenceToken.html":{},"index.html":{}}}],["kind",{"_index":509,"title":{},"body":{"license.html":{}}}],["last",{"_index":137,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["liability",{"_index":525,"title":{},"body":{"license.html":{}}}],["liable",{"_index":522,"title":{},"body":{"license.html":{}}}],["library",{"_index":250,"title":{},"body":{"index.html":{}}}],["license",{"_index":466,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":487,"title":{},"body":{"license.html":{}}}],["limited",{"_index":512,"title":{},"body":{"license.html":{}}}],["look",{"_index":337,"title":{},"body":{"index.html":{}}}],["looked",{"_index":393,"title":{},"body":{"index.html":{}}}],["lookup",{"_index":13,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["lowercase",{"_index":416,"title":{},"body":{"index.html":{}}}],["lyngdoh",{"_index":472,"title":{},"body":{"license.html":{}}}],["matching",{"_index":93,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math",{"_index":248,"title":{},"body":{"index.html":{}}}],["math.cos",{"_index":400,"title":{},"body":{"index.html":{}}}],["math.cos(2",{"_index":389,"title":{},"body":{"index.html":{}}}],["math.cos(90",{"_index":458,"title":{},"body":{"index.html":{}}}],["mathlibrary",{"_index":394,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":514,"title":{},"body":{"license.html":{}}}],["merge",{"_index":490,"title":{},"body":{"license.html":{}}}],["method",{"_index":329,"title":{},"body":{"index.html":{}}}],["methods",{"_index":21,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/SubTokenizerResult.html":{},"index.html":{}}}],["miscellaneous",{"_index":236,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":467,"title":{},"body":{"license.html":{}}}],["modify",{"_index":489,"title":{},"body":{"license.html":{}}}],["modules",{"_index":534,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["modules/dl",{"_index":289,"title":{},"body":{"index.html":{}}}],["more",{"_index":279,"title":{},"body":{"index.html":{}}}],["multiplication",{"_index":410,"title":{},"body":{"index.html":{}}}],["name",{"_index":42,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{},"index.html":{}}}],["name.name.name.name",{"_index":413,"title":{},"body":{"index.html":{}}}],["named",{"_index":318,"title":{},"body":{"index.html":{}}}],["native",{"_index":450,"title":{},"body":{"index.html":{}}}],["necessarily",{"_index":358,"title":{},"body":{"index.html":{}}}],["need",{"_index":357,"title":{},"body":{"index.html":{}}}],["new",{"_index":87,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nextregex",{"_index":540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nextregex.test(next",{"_index":551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next|string|the",{"_index":435,"title":{},"body":{"index.html":{}}}],["node",{"_index":288,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":518,"title":{},"body":{"license.html":{}}}],["notafunction",{"_index":362,"title":{},"body":{"index.html":{}}}],["note",{"_index":274,"title":{},"body":{"index.html":{}}}],["notice",{"_index":502,"title":{},"body":{"license.html":{}}}],["npm",{"_index":255,"title":{},"body":{"index.html":{}}}],["null",{"_index":121,"title":{},"body":{"classes/DMEToken.html":{}}}],["number",{"_index":105,"title":{},"body":{"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{},"index.html":{}}}],["numbers",{"_index":354,"title":{},"body":{"index.html":{}}}],["numerical",{"_index":107,"title":{},"body":{"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"index.html":{}}}],["object",{"_index":54,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{},"index.html":{}}}],["objects",{"_index":369,"title":{},"body":{"index.html":{}}}],["obtaining",{"_index":479,"title":{},"body":{"license.html":{}}}],["one",{"_index":334,"title":{},"body":{"index.html":{}}}],["open",{"_index":171,"title":{},"body":{"classes/RegexContainer.html":{}}}],["openingparenthesis",{"_index":159,"title":{},"body":{"classes/RegexContainer.html":{}}}],["openingparenthesis|open",{"_index":406,"title":{},"body":{"index.html":{}}}],["openparenthesis",{"_index":242,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["operand",{"_index":241,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["operands",{"_index":447,"title":{},"body":{"index.html":{}}}],["operand|number",{"_index":326,"title":{},"body":{"index.html":{}}}],["operation",{"_index":191,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["operator",{"_index":160,"title":{},"body":{"classes/RegexContainer.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["operators",{"_index":173,"title":{},"body":{"classes/RegexContainer.html":{},"index.html":{}}}],["operator|the",{"_index":407,"title":{},"body":{"index.html":{}}}],["optional",{"_index":57,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{}}}],["order",{"_index":333,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":529,"title":{},"body":{"license.html":{}}}],["out",{"_index":531,"title":{},"body":{"license.html":{}}}],["overview",{"_index":535,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":230,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":278,"title":{},"body":{"index.html":{}}}],["param",{"_index":84,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/SubTokenizerResult.html":{}}}],["parameter",{"_index":344,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":36,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{},"index.html":{}}}],["parameter|type|description",{"_index":431,"title":{},"body":{"index.html":{}}}],["params",{"_index":26,"title":{},"body":{"classes/DMEReferenceToken.html":{},"index.html":{}}}],["params[0",{"_index":462,"title":{},"body":{"index.html":{}}}],["params[1",{"_index":351,"title":{},"body":{"index.html":{}}}],["params[2",{"_index":352,"title":{},"body":{"index.html":{}}}],["params|dmetoken[][]|parameters",{"_index":373,"title":{},"body":{"index.html":{}}}],["parenthesis",{"_index":166,"title":{},"body":{"classes/RegexContainer.html":{},"index.html":{}}}],["parsed",{"_index":130,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["parsing",{"_index":127,"title":{},"body":{"classes/ProcessingResult.html":{},"index.html":{}}}],["particular",{"_index":516,"title":{},"body":{"license.html":{}}}],["passed",{"_index":355,"title":{},"body":{"index.html":{}}}],["passing",{"_index":330,"title":{},"body":{"index.html":{}}}],["path",{"_index":45,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["performs",{"_index":425,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["permission",{"_index":473,"title":{},"body":{"license.html":{}}}],["permit",{"_index":497,"title":{},"body":{"license.html":{}}}],["person",{"_index":478,"title":{},"body":{"license.html":{}}}],["persons",{"_index":498,"title":{},"body":{"license.html":{}}}],["please",{"_index":452,"title":{},"body":{"index.html":{}}}],["portions",{"_index":506,"title":{},"body":{"license.html":{}}}],["possible",{"_index":240,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["private",{"_index":17,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{}}}],["processingresult",{"_index":124,"title":{"classes/ProcessingResult.html":{}},"body":{"classes/ProcessingResult.html":{},"coverage.html":{}}}],["processingresult.ts",{"_index":125,"title":{},"body":{"classes/ProcessingResult.html":{},"coverage.html":{}}}],["processingresult.ts:11",{"_index":135,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["processingresult.ts:16",{"_index":134,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["processingresult.ts:23",{"_index":139,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["processingresult.ts:26",{"_index":143,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["processingresult.ts:30",{"_index":141,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["processingresult.ts:37",{"_index":145,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["project",{"_index":155,"title":{},"body":{"classes/RegexContainer.html":{},"index.html":{}}}],["properties",{"_index":16,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{}}}],["provide",{"_index":331,"title":{},"body":{"index.html":{}}}],["provided",{"_index":507,"title":{},"body":{"license.html":{}}}],["public",{"_index":86,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{}}}],["publish",{"_index":491,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":517,"title":{},"body":{"license.html":{}}}],["r",{"_index":460,"title":{},"body":{"index.html":{}}}],["reading",{"_index":307,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":156,"title":{},"body":{"classes/RegexContainer.html":{}}}],["ref",{"_index":291,"title":{},"body":{"index.html":{}}}],["refer",{"_index":277,"title":{},"body":{"index.html":{}}}],["reference",{"_index":9,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["referencename",{"_index":25,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/RegexContainer.html":{}}}],["referencename.split",{"_index":89,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["referencenamecharacters",{"_index":161,"title":{},"body":{"classes/RegexContainer.html":{}}}],["referencenameinitial",{"_index":162,"title":{},"body":{"classes/RegexContainer.html":{}}}],["referencename|string[]|complete",{"_index":370,"title":{},"body":{"index.html":{}}}],["references",{"_index":263,"title":{},"body":{"index.html":{}}}],["referencetoken",{"_index":53,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["referencetoken.params",{"_index":91,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["referencetoken.referencename",{"_index":88,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["referencetoken.type",{"_index":90,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["referencetokentype",{"_index":47,"title":{},"body":{"classes/DMEReferenceToken.html":{},"miscellaneous/enumerations.html":{}}}],["referencetokentype.function",{"_index":48,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["reference|dmereferencetoken",{"_index":327,"title":{},"body":{"index.html":{}}}],["regexcontainer",{"_index":150,"title":{"classes/RegexContainer.html":{}},"body":{"classes/RegexContainer.html":{},"coverage.html":{},"index.html":{}}}],["regexcontainer.ts",{"_index":151,"title":{},"body":{"classes/RegexContainer.html":{},"coverage.html":{},"index.html":{}}}],["regexcontainer.ts:14",{"_index":169,"title":{},"body":{"classes/RegexContainer.html":{}}}],["regexcontainer.ts:19",{"_index":178,"title":{},"body":{"classes/RegexContainer.html":{}}}],["regexcontainer.ts:24",{"_index":181,"title":{},"body":{"classes/RegexContainer.html":{}}}],["regexcontainer.ts:29",{"_index":184,"title":{},"body":{"classes/RegexContainer.html":{}}}],["regexcontainer.ts:34",{"_index":172,"title":{},"body":{"classes/RegexContainer.html":{}}}],["regexcontainer.ts:39",{"_index":170,"title":{},"body":{"classes/RegexContainer.html":{}}}],["regexcontainer.ts:9",{"_index":164,"title":{},"body":{"classes/RegexContainer.html":{}}}],["regexp",{"_index":163,"title":{},"body":{"classes/RegexContainer.html":{},"miscellaneous/variables.html":{}}}],["regex|name|description",{"_index":402,"title":{},"body":{"index.html":{}}}],["regular",{"_index":152,"title":{},"body":{"classes/RegexContainer.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["repository",{"_index":259,"title":{},"body":{"index.html":{}}}],["represented",{"_index":317,"title":{},"body":{"index.html":{}}}],["representing",{"_index":8,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/SubTokenizerResult.html":{}}}],["represents",{"_index":126,"title":{},"body":{"classes/ProcessingResult.html":{},"index.html":{}}}],["require",{"_index":390,"title":{},"body":{"index.html":{}}}],["requirement",{"_index":423,"title":{},"body":{"index.html":{}}}],["requires",{"_index":336,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":486,"title":{},"body":{"license.html":{}}}],["result",{"_index":92,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["resulting",{"_index":382,"title":{},"body":{"index.html":{}}}],["results",{"_index":94,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":79,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":62,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{},"index.html":{}}}],["rights",{"_index":488,"title":{},"body":{"license.html":{}}}],["scenario",{"_index":294,"title":{},"body":{"index.html":{}}}],["second",{"_index":343,"title":{},"body":{"index.html":{}}}],["see",{"_index":85,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"index.html":{}}}],["self",{"_index":441,"title":{},"body":{"index.html":{}}}],["sell",{"_index":495,"title":{},"body":{"license.html":{}}}],["separator",{"_index":414,"title":{},"body":{"index.html":{}}}],["set",{"_index":83,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{}}}],["setindex(index",{"_index":140,"title":{},"body":{"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{}}}],["setparams(params",{"_index":70,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["setreferencename(referencename",{"_index":65,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["settoken(token",{"_index":144,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["settokens(tokens",{"_index":202,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["settype(type",{"_index":74,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{}}}],["setvalue(value",{"_index":116,"title":{},"body":{"classes/DMEToken.html":{}}}],["several",{"_index":296,"title":{},"body":{"index.html":{}}}],["sh",{"_index":256,"title":{},"body":{"index.html":{}}}],["shall",{"_index":503,"title":{},"body":{"license.html":{}}}],["simply",{"_index":282,"title":{},"body":{"index.html":{}}}],["software",{"_index":481,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{},"index.html":{}}}],["specified",{"_index":55,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{}}}],["stack",{"_index":233,"title":{},"body":{"dependencies.html":{}}}],["stacks",{"_index":446,"title":{},"body":{"index.html":{}}}],["start",{"_index":186,"title":{},"body":{"classes/RegexContainer.html":{},"index.html":{}}}],["started",{"_index":246,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":420,"title":{},"body":{"index.html":{}}}],["statements",{"_index":212,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":22,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{},"index.html":{}}}],["still",{"_index":359,"title":{},"body":{"index.html":{}}}],["string",{"_index":39,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/SubTokenizerResult.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":189,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["subject",{"_index":500,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":493,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":505,"title":{},"body":{"license.html":{}}}],["subtokenizerresult",{"_index":187,"title":{"classes/SubTokenizerResult.html":{}},"body":{"classes/SubTokenizerResult.html":{},"coverage.html":{}}}],["subtokenizerresult.ts",{"_index":188,"title":{},"body":{"classes/SubTokenizerResult.html":{},"coverage.html":{}}}],["subtokenizerresult.ts:11",{"_index":194,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["subtokenizerresult.ts:16",{"_index":193,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["subtokenizerresult.ts:23",{"_index":201,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["subtokenizerresult.ts:26",{"_index":204,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["subtokenizerresult.ts:30",{"_index":203,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["subtokenizerresult.ts:33",{"_index":205,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["subtokenizerresult.ts:43",{"_index":196,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["subtraction",{"_index":409,"title":{},"body":{"index.html":{}}}],["succeeding",{"_index":427,"title":{},"body":{"index.html":{}}}],["switch(currenttoken.type",{"_index":541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["syntax",{"_index":384,"title":{},"body":{"index.html":{}}}],["system",{"_index":46,"title":{},"body":{"classes/DMEReferenceToken.html":{},"index.html":{}}}],["table",{"_index":229,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":228,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":376,"title":{},"body":{"index.html":{}}}],["takes",{"_index":340,"title":{},"body":{"index.html":{}}}],["terms",{"_index":304,"title":{},"body":{"index.html":{}}}],["this._index",{"_index":146,"title":{},"body":{"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{}}}],["this._params",{"_index":81,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["this._referencename",{"_index":80,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["this._token",{"_index":148,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["this._tokens",{"_index":206,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["this._type",{"_index":82,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{}}}],["this._value",{"_index":120,"title":{},"body":{"classes/DMEToken.html":{}}}],["three",{"_index":368,"title":{},"body":{"index.html":{}}}],["through",{"_index":555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["throw",{"_index":548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":10,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["token.index",{"_index":208,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["token.tokens",{"_index":207,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["token.type",{"_index":122,"title":{},"body":{"classes/DMEToken.html":{}}}],["token.value",{"_index":123,"title":{},"body":{"classes/DMEToken.html":{}}}],["tokenize",{"_index":328,"title":{},"body":{"index.html":{}}}],["tokenized",{"_index":37,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/SubTokenizerResult.html":{}}}],["tokenizing",{"_index":190,"title":{},"body":{"classes/SubTokenizerResult.html":{}}}],["tokens",{"_index":106,"title":{},"body":{"classes/DMEToken.html":{},"classes/SubTokenizerResult.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["tokentype",{"_index":102,"title":{},"body":{"classes/DMEToken.html":{},"miscellaneous/variables.html":{}}}],["tokentype|value",{"_index":325,"title":{},"body":{"index.html":{}}}],["tort",{"_index":528,"title":{},"body":{"license.html":{}}}],["transition",{"_index":421,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["transitioncheck",{"_index":226,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["transitioncheck.ts",{"_index":224,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["true",{"_index":437,"title":{},"body":{"index.html":{}}}],["try",{"_index":550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ts",{"_index":234,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["tsc",{"_index":273,"title":{},"body":{"index.html":{}}}],["two",{"_index":319,"title":{},"body":{"index.html":{}}}],["type",{"_index":27,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/RegexContainer.html":{},"classes/SubTokenizerResult.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["type.enum",{"_index":77,"title":{},"body":{"classes/DMEReferenceToken.html":{}}}],["type.enum.ts",{"_index":239,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["types",{"_index":244,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["typescript",{"_index":265,"title":{},"body":{"index.html":{}}}],["typescript's",{"_index":247,"title":{},"body":{"index.html":{}}}],["type|referencetokentype|type",{"_index":372,"title":{},"body":{"index.html":{}}}],["type|tokentype|type",{"_index":321,"title":{},"body":{"index.html":{}}}],["understanding",{"_index":303,"title":{},"body":{"index.html":{}}}],["up",{"_index":338,"title":{},"body":{"index.html":{}}}],["uppercase",{"_index":415,"title":{},"body":{"index.html":{}}}],["usage",{"_index":281,"title":{},"body":{"index.html":{}}}],["use",{"_index":59,"title":{},"body":{"classes/DMEReferenceToken.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":154,"title":{},"body":{"classes/RegexContainer.html":{},"index.html":{}}}],["useful",{"_index":298,"title":{},"body":{"index.html":{}}}],["uses",{"_index":440,"title":{},"body":{"index.html":{}}}],["using",{"_index":254,"title":{},"body":{"index.html":{}}}],["valid",{"_index":179,"title":{},"body":{"classes/RegexContainer.html":{},"index.html":{}}}],["validating",{"_index":149,"title":{},"body":{"classes/ProcessingResult.html":{}}}],["value",{"_index":34,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/RegexContainer.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["value|any|value",{"_index":322,"title":{},"body":{"index.html":{}}}],["variable",{"_index":225,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":537,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":67,"title":{},"body":{"classes/DMEReferenceToken.html":{},"classes/DMEToken.html":{},"classes/ProcessingResult.html":{},"classes/SubTokenizerResult.html":{}}}],["w_t_",{"_index":461,"title":{},"body":{"index.html":{}}}],["warranties",{"_index":513,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":508,"title":{},"body":{"license.html":{}}}],["well",{"_index":395,"title":{},"body":{"index.html":{}}}],["whether",{"_index":426,"title":{},"body":{"index.html":{},"license.html":{}}}],["wish",{"_index":286,"title":{},"body":{"index.html":{}}}],["without",{"_index":485,"title":{},"body":{"license.html":{}}}],["words",{"_index":451,"title":{},"body":{"index.html":{}}}],["x",{"_index":463,"title":{},"body":{"index.html":{}}}],["yield",{"_index":367,"title":{},"body":{"index.html":{}}}],["z",{"_index":183,"title":{},"body":{"classes/RegexContainer.html":{},"miscellaneous/variables.html":{}}}],["z$]$/|referencenameinitial|the",{"_index":419,"title":{},"body":{"index.html":{}}}],["z0",{"_index":175,"title":{},"body":{"classes/RegexContainer.html":{},"index.html":{}}}],["za",{"_index":174,"title":{},"body":{"classes/RegexContainer.html":{},"index.html":{},"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DMEReferenceToken.html":{"url":"classes/DMEReferenceToken.html","title":"class - DMEReferenceToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DMEReferenceToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            dMEReferenceToken.ts\n        \n\n            \n                Description\n            \n            \n                Class representing a reference token which is either a function or constant from a lookup JSON.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _params\n                            \n                            \n                                    Private\n                                _referenceName\n                            \n                            \n                                    Private\n                                _type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    referenceName\n                                \n                                \n                                    params\n                                \n                                \n                                    type\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in dMEReferenceToken.ts:22\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _params\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in dMEReferenceToken.ts:17\n                            \n                        \n\n                \n                    \n                        Parameters to the reference which is array of tokenized expression.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _referenceName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in dMEReferenceToken.ts:12\n                            \n                        \n\n                \n                    \n                        Complete name of the reference (analogous to an absolute path in file-system)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ReferenceTokenType\n\n                        \n                    \n                    \n                        \n                            Default value : ReferenceTokenType.Function\n                        \n                    \n                        \n                            \n                                    Defined in dMEReferenceToken.ts:22\n                            \n                        \n\n                \n                    \n                        Reference type which is a Function or a Constant\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance(referenceName: string, params: DMEToken[][], type: ReferenceTokenType)\n                \n            \n\n\n            \n                \n                    Defined in dMEReferenceToken.ts:54\n                \n            \n\n\n            \n                \n                    Instantiates a ReferenceToken object with the specified fields.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    referenceName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name (including path) of the reference.\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                                DMEToken[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The parameters which the function will use (empty arry if constant).\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                ReferenceTokenType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type of ReferenceToken from ReferenceTokenType\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DMEReferenceToken\n\n                    \n                    \n                        Returns a ReferenceToken object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        referenceName\n                    \n                \n\n                \n                    \n                        getreferenceName()\n                    \n                \n                            \n                                \n                                    Defined in dMEReferenceToken.ts:26\n                                \n                            \n\n                \n                    \n                        setreferenceName(referenceName: [])\n                    \n                \n                            \n                                \n                                    Defined in dMEReferenceToken.ts:36\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            referenceName\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        params\n                    \n                \n\n                \n                    \n                        getparams()\n                    \n                \n                            \n                                \n                                    Defined in dMEReferenceToken.ts:29\n                                \n                            \n\n                \n                    \n                        setparams(params)\n                    \n                \n                            \n                                \n                                    Defined in dMEReferenceToken.ts:39\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            params\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n\n                \n                    \n                        gettype()\n                    \n                \n                            \n                                \n                                    Defined in dMEReferenceToken.ts:32\n                                \n                            \n\n                \n                    \n                        settype(type)\n                    \n                \n                            \n                                \n                                    Defined in dMEReferenceToken.ts:42\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            type\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { DMEToken } from \"./dMEToken\";\nimport { ReferenceTokenType } from \"./reference-token-type.enum\";\n\n/**\n * Class representing a reference token which is either a function or constant from a lookup JSON.\n */\nexport class DMEReferenceToken {\n\n    /**\n     * Complete name of the reference (analogous to an absolute path in file-system)\n     */\n    private _referenceName : string[] = [];\n    \n    /**\n     * Parameters to the reference which is array of tokenized expression.\n     */\n    private _params : Array = [];\n    \n    /**\n     * Reference type which is a Function or a Constant\n     */\n    private _type : ReferenceTokenType = ReferenceTokenType.Function;\n\n    constructor() {}\n\n    get referenceName() : string[] {\n        return this._referenceName;\n    }\n    get params() : Array {\n        return this._params;\n    }\n    get type() : ReferenceTokenType {\n        return this._type;\n    }\n\n    set referenceName( referenceName : string[] ) {\n        this._referenceName = referenceName;\n    }\n    set params( params : Array ) {\n        this._params = params;\n    }\n    set type( type : ReferenceTokenType ) {\n        this._type = type;\n    }\n\n    /**\n     * Instantiates a ReferenceToken object with the specified fields.\n     * @param referenceName The name (including path) of the reference.\n     * @param params The parameters which the function will use (empty arry if constant).\n     * @param type Type of ReferenceToken from ReferenceTokenType\n     * @returns Returns a ReferenceToken object.\n     * @see ReferenceTokenType\n     */\n    public static getInstance( referenceName : string, params : DMEToken[][], type : ReferenceTokenType ) : DMEReferenceToken {\n        let referenceToken : DMEReferenceToken = new DMEReferenceToken();\n        referenceToken.referenceName = referenceName.split('.');\n        referenceToken.type = type;\n        referenceToken.params = params;\n        return referenceToken;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DMEToken.html":{"url":"classes/DMEToken.html","title":"class - DMEToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DMEToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            dMEToken.ts\n        \n\n            \n                Description\n            \n            \n                Class for representing a general token. \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _type\n                            \n                            \n                                    Private\n                                _value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    type\n                                \n                                \n                                    value\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in dMEToken.ts:15\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DMETokenType\n\n                        \n                    \n                        \n                            \n                                    Defined in dMEToken.ts:10\n                            \n                        \n\n                \n                    \n                        Indicates the type of token. See TokenType enum.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in dMEToken.ts:15\n                            \n                        \n\n                \n                    \n                        Contains the value of the token. For number tokens, the value is the numerical value. for other tokens, it is the character itself.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance(type: DMETokenType, value: any)\n                \n            \n\n\n            \n                \n                    Defined in dMEToken.ts:43\n                \n            \n\n\n            \n                \n                    Instantiates a token with the specified type and value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                DMETokenType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The type for the token from DMETokenType\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value of the token.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DMEToken\n\n                    \n                    \n                        Returns a token object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n\n                \n                    \n                        gettype()\n                    \n                \n                            \n                                \n                                    Defined in dMEToken.ts:22\n                                \n                            \n\n                \n                    \n                        settype(type)\n                    \n                \n                            \n                                \n                                    Defined in dMEToken.ts:29\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            type\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n\n                \n                    \n                        getvalue()\n                    \n                \n                            \n                                \n                                    Defined in dMEToken.ts:25\n                                \n                            \n\n                \n                    \n                        setvalue(value: any)\n                    \n                \n                            \n                                \n                                    Defined in dMEToken.ts:32\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            any\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { DMETokenType } from './dMETokenType.enum';\n\n/**\n * Class for representing a general token. \n */\nexport class DMEToken {\n    /**\n     * Indicates the type of token. See TokenType enum.\n     */\n    private _type : DMETokenType;\n    \n    /**\n     * Contains the value of the token. For number tokens, the value is the numerical value. for other tokens, it is the character itself.\n     */\n    private _value : any;\n\n    constructor() {\n      this._type = DMETokenType.Operand;\n      this._value = null;\n    }\n\n    get type() : DMETokenType {\n      return this._type;\n    }\n    get value() : any {\n      return this._value;\n    }\n\n    set type( type : DMETokenType ) {\n      this._type = type;\n    }\n    set value( value : any ) {\n      this._value = value;\n    }\n\n    /**\n     * Instantiates a token with the specified type and value.\n     * @param type The type for the token from DMETokenType\n     * @param value The value of the token.\n     * @returns Returns a token object.\n     * @see DMETokenType\n     */\n    public static getInstance( type : DMETokenType, value : any ) : DMEToken {\n      let token : DMEToken = new DMEToken();\n      token.type = type; token.value = value;\n      return token;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProcessingResult.html":{"url":"classes/ProcessingResult.html","title":"class - ProcessingResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProcessingResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            processingResult.ts\n        \n\n            \n                Description\n            \n            \n                Class that represents the result of the parsing a numerical or reference token. The ending index of the number or the reference alongwith the token that was parsed from the expression are contained as fields.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _index\n                            \n                            \n                                    Private\n                                _token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    index\n                                \n                                \n                                    token\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in processingResult.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _index\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in processingResult.ts:11\n                            \n                        \n\n                \n                    \n                        The end index of the last character of the token in the expression.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DMEToken\n\n                        \n                    \n                        \n                            \n                                    Defined in processingResult.ts:16\n                            \n                        \n\n                \n                    \n                        The token object of the number or the reference.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n\n                \n                    \n                        getindex()\n                    \n                \n                            \n                                \n                                    Defined in processingResult.ts:23\n                                \n                            \n\n                \n                    \n                        setindex(index: number)\n                    \n                \n                            \n                                \n                                    Defined in processingResult.ts:30\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            index\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        token\n                    \n                \n\n                \n                    \n                        gettoken()\n                    \n                \n                            \n                                \n                                    Defined in processingResult.ts:26\n                                \n                            \n\n                \n                    \n                        settoken(token)\n                    \n                \n                            \n                                \n                                    Defined in processingResult.ts:37\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            token\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { DMEToken } from \"./dMEToken\";\n\n/**\n * Class that represents the result of the parsing a numerical or reference token. The ending index of the number or the reference alongwith the token that was parsed from the expression are contained as fields.\n */\nexport class ProcessingResult {\n    \n    /**\n     * The end index of the last character of the token in the expression.\n     */\n    private _index : number;\n    \n    /**\n     * The token object of the number or the reference.\n     */\n    private _token : DMEToken;\n\n    constructor() {\n        this._index = -1;\n        this._token = new DMEToken();\n    }\n\n    get index() : number {\n        return this._index;\n    }\n    get token() : DMEToken {\n        return this._token;\n    }\n\n    set index( index : number ) {\n        // Validating index\n        if( index \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegexContainer.html":{"url":"classes/RegexContainer.html","title":"class - RegexContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegexContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            regexContainer.ts\n        \n\n            \n                Description\n            \n            \n                Regular expressions used in the project.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                ClosingParenthesis\n                            \n                            \n                                    Static\n                                    Readonly\n                                Digit\n                            \n                            \n                                    Static\n                                    Readonly\n                                OpeningParenthesis\n                            \n                            \n                                    Static\n                                    Readonly\n                                Operator\n                            \n                            \n                                    Static\n                                    Readonly\n                                ReferenceName\n                            \n                            \n                                    Static\n                                    Readonly\n                                ReferenceNameCharacters\n                            \n                            \n                                    Static\n                                    Readonly\n                                ReferenceNameInitial\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            ClosingParenthesis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RegExp\n\n                        \n                    \n                    \n                        \n                            Default value : /^[)]$/\n                        \n                    \n                        \n                            \n                                    Defined in regexContainer.ts:9\n                            \n                        \n\n                \n                    \n                        Close parenthesis\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            Digit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RegExp\n\n                        \n                    \n                    \n                        \n                            Default value : /^[0-9]$/\n                        \n                    \n                        \n                            \n                                    Defined in regexContainer.ts:14\n                            \n                        \n\n                \n                    \n                        Digit regular expression.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            OpeningParenthesis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RegExp\n\n                        \n                    \n                    \n                        \n                            Default value : /^[(]$/\n                        \n                    \n                        \n                            \n                                    Defined in regexContainer.ts:39\n                            \n                        \n\n                \n                    \n                        Open parenthesis\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            Operator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RegExp\n\n                        \n                    \n                    \n                        \n                            Default value : /^[-+*/]$/\n                        \n                    \n                        \n                            \n                                    Defined in regexContainer.ts:34\n                            \n                        \n\n                \n                    \n                        Operators\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            ReferenceName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RegExp\n\n                        \n                    \n                    \n                        \n                            Default value : /^([a-zA-Z0-9_$]+(\\.[a-zA-Z0-9_$]+)*)$/\n                        \n                    \n                        \n                            \n                                    Defined in regexContainer.ts:19\n                            \n                        \n\n                \n                    \n                        Valid complete reference name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            ReferenceNameCharacters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RegExp\n\n                        \n                    \n                    \n                        \n                            Default value : /^[a-zA-Z0-9$_.]$/\n                        \n                    \n                        \n                            \n                                    Defined in regexContainer.ts:24\n                            \n                        \n\n                \n                    \n                        Valid characters in a reference name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            ReferenceNameInitial\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RegExp\n\n                        \n                    \n                    \n                        \n                            Default value : /^[a-zA-Z$]$/\n                        \n                    \n                        \n                            \n                                    Defined in regexContainer.ts:29\n                            \n                        \n\n                \n                    \n                        Valid initial or start character of a reference name\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegexContainer {\n\n    /**\n     * Close parenthesis\n     */\n    public static readonly ClosingParenthesis : RegExp = /^[)]$/;\n    \n    /**\n     * Digit regular expression.\n     */\n    public static readonly Digit : RegExp = /^[0-9]$/;\n    \n    /**\n     * Valid complete reference name\n     */\n    public static readonly ReferenceName : RegExp = /^([a-zA-Z0-9_$]+(\\.[a-zA-Z0-9_$]+)*)$/;\n    \n    /**\n     * Valid characters in a reference name\n     */\n    public static readonly ReferenceNameCharacters : RegExp = /^[a-zA-Z0-9$_.]$/;\n    \n    /**\n     * Valid initial or start character of a reference name\n     */\n    public static readonly ReferenceNameInitial : RegExp = /^[a-zA-Z$]$/;\n    \n    /**\n     * Operators\n     */\n    public static readonly Operator : RegExp = /^[-+*/]$/;\n    \n    /**\n     * Open parenthesis\n     */\n    public static readonly OpeningParenthesis : RegExp = /^[(]$/;\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SubTokenizerResult.html":{"url":"classes/SubTokenizerResult.html","title":"class - SubTokenizerResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SubTokenizerResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            subTokenizerResult.ts\n        \n\n            \n                Description\n            \n            \n                An class representing the result of sub-tokenizing operation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _index\n                            \n                            \n                                    Private\n                                _tokens\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    tokens\n                                \n                                \n                                    index\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in subTokenizerResult.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _index\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in subTokenizerResult.ts:11\n                            \n                        \n\n                \n                    \n                        Ending index of the sub-string of the expression which has been tokenized.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _tokens\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DMEToken[]\n\n                        \n                    \n                        \n                            \n                                    Defined in subTokenizerResult.ts:16\n                            \n                        \n\n                \n                    \n                        Array of tokens of the sub-string.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance(tokens: DMEToken[], index: any)\n                \n            \n\n\n            \n                \n                    Defined in subTokenizerResult.ts:43\n                \n            \n\n\n            \n                \n                    Gets an instance of the SubTokenizerResult object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokens\n                                    \n                                                DMEToken[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The array of tokens generated.\n\n                                    \n                                \n                                \n                                    index\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The ending index of the sub-string.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SubTokenizerResult\n\n                    \n                    \n                        Returns a SubTokenizerResult object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        tokens\n                    \n                \n\n                \n                    \n                        gettokens()\n                    \n                \n                            \n                                \n                                    Defined in subTokenizerResult.ts:23\n                                \n                            \n\n                \n                    \n                        settokens(tokens: [])\n                    \n                \n                            \n                                \n                                    Defined in subTokenizerResult.ts:30\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            tokens\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n\n                \n                    \n                        getindex()\n                    \n                \n                            \n                                \n                                    Defined in subTokenizerResult.ts:26\n                                \n                            \n\n                \n                    \n                        setindex(index: number)\n                    \n                \n                            \n                                \n                                    Defined in subTokenizerResult.ts:33\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            index\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { DMEToken } from \"./dMEToken\";\n\n/**\n * An class representing the result of sub-tokenizing operation.\n */\nexport class SubTokenizerResult {\n    \n    /**\n     * Ending index of the sub-string of the expression which has been tokenized.\n     */\n    private _index : number;\n    \n    /**\n     * Array of tokens of the sub-string.\n     */\n    private _tokens : DMEToken[];\n\n    constructor() {\n        this._index = -1;\n        this._tokens = [];\n    }\n\n    get tokens() : DMEToken[] {\n        return this._tokens;\n    }\n    get index() : number {\n        return this._index;\n    }\n\n    set tokens( tokens : DMEToken[] ) {\n        this._tokens = tokens;\n    }\n    set index( index : number ) {\n        this._index = index;\n    }\n\n    /**\n     * Gets an instance of the SubTokenizerResult object.\n     * @param tokens The array of tokens generated.\n     * @param index The ending index of the sub-string.\n     * @returns Returns a SubTokenizerResult object.\n     */\n    public static getInstance( tokens : DMEToken[], index : any ) : SubTokenizerResult {\n        let token : SubTokenizerResult = new SubTokenizerResult();\n        token.tokens = tokens; token.index = index;\n        return token;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                dMEReferenceToken.ts\n            \n            class\n            DMEReferenceToken\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                dMEToken.ts\n            \n            class\n            DMEToken\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                dlMathEval.ts\n            \n            class\n            DLMathEval\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                processingResult.ts\n            \n            class\n            ProcessingResult\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                regexContainer.ts\n            \n            class\n            RegexContainer\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                subTokenizerResult.ts\n            \n            class\n            SubTokenizerResult\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                transitionCheck.ts\n            \n            variable\n            TransitionCheck\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            dl-stack-ts : ^1.0.0\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DMETokenType   (dMETokenType.enum.ts)\n                        \n                        \n                            ReferenceTokenType   (reference-token-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    dMETokenType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        DMETokenType\n                    \n                \n                    \n                        \n                            Enum for the all possible type of tokens.\n\n                        \n                    \n                        \n                            \n                                 Operator\n                            \n                        \n                        \n                            \n                                 Operand\n                            \n                        \n                        \n                            \n                                 OpenParenthesis\n                            \n                        \n                        \n                            \n                                 CloseParenthesis\n                            \n                        \n                        \n                            \n                                 Reference\n                            \n                        \n            \n        \n\n    reference-token-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ReferenceTokenType\n                    \n                \n                    \n                        \n                            Types of reference token.\n\n                        \n                    \n                        \n                            \n                                 Constant\n                            \n                        \n                        \n                            \n                                 Function\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nTypeScript's Math Evaluator\nThis is a library for parsing and evaluating string arithmetic expressions.\nInstallation\nUsing NPM\nsh\nnpm i dl-math-eval-ts\nUsing GitHub Repository\nClone or download the repository and add the import references accordingly in your TypeScript source code.\nsh\ngit clone\nBuild\nTo build the source and generate the corresponding JS source code:\nsh\ngit clone \ncd \ntsc\nNote: You must have TypeScript compiler installed in your system to use tsc. Refer to this page for more information.\nUsage\nTo use the library, simply use the appropriate imports in the source code.\nFor example, if you wish to evaluate an expression then:\n```typescript\nimport { DLMathEval } from './node-modules/dl-math-eval-ts';\nlet exp : string = 'your expression';\nlet ref : any = {}; // your references and methods definitions\nlet result : number = DLMathEval.evaluateExpression( exp, ref );\n```\nThis is an example of a scenario where you have used npm to install the library.\nThere are several other static methods in DLMathEval that you may find useful so I encourage you to explore the documentation to discover these methods.\nHowever to get a better understanding of the terms and conventions followed in the methods and classes, then reading the description below will help.\nDescription\nHere are the descriptions and elaborations of a few terms which are used in this project:\nToken\nA token is an independent element in an expression. It can be a number, an operator or a function call. A token in this library is represented by a class named DMEToken. The class has two fields: \n|Field|Type|Description|\n|-|-|-|\n|type|TokenType|type of token|\n|value|any|value of the token|\nThe value that must value must hold depends on the type of the token.\n|TokenType|Value Type|\n|-|-|\n|CloseParenthesis|')'|\n|OpenParenthesis|'('|\n|Operand|number|\n|Operator|'-' or '+' or '*' or '/'|\n|Reference|DMEReferenceToken object|\nThe tokenize method on passing a valid expression will provide an array containing the tokens in order corresponding to the expression.\nReference Token\nA reference token is one that represents an entity that requires a look-up in a JSON object. For example the token:\ntypescript\nf1.f2.f3(2,1)\nis a function call and takes two arguments. The function must be declared in the second parameter of the evaluateExpression method. For the above example the parameter can be the following object:\ntypescript\nlet ref : any = {\n    \"f1\": {\n        \"f2\": {\n            \"f3\": function( params : number[] ) : number {\n                return params[1] * params[2];\n            }\n        }\n    }\n};\nThe function takes an array argument where the numbers which are to be passed as arguments are contained in the order of declaration of the function in the params array.\nThe reference need not necessarily be a function but it can also be a number or an expression that results to a number. For example the below expression is still valid:\n```typescript\nlet ref : any = {\n    \"f1\": {\n        \"f2\": {\n            \"f3\": function( params : number[] ) : number {\n                return params[1] * params[2];\n            },\n            \"f4\": function() : number {\n                return 101;\n            }\n        },\n        \"notAFunction\": 5+1\n    }\n};\nlet expression : string = 'f1.f2.f3(4,5) + f1.f2.f4 * f1.notAFunction';\n```\nParsing expression will yield three DMEReferenceToken objects which in this scenario are valid.\nThe DMEReferenceToken class has three fields:\n|Field|Type|Description|\n|-|-|-|\n|referenceName|string[]|complete name of the reference, which is delimited on . character|\n|type|ReferenceTokenType|type of token, can be Function or Constant|\n|params|DMEToken[][]|parameters to be passed to the function|\nThe params field is an array of expression where the expression is expressed as an array of tokens. A reference token can take any valid expression as a parameter and the expression may include references also. Before evaluation of a reference, all its parameters are evaluated first and then the resulting numerical results are passed to the function (you can see this as a depth-first evaluation).\nA Constant type is one which does not have the syntax of a function call. f1.notAFunction or f1.f2.f4 are both Constant types. Intuitively, a Function has the syntax of a function call, example f1.f2.f3(2,3).\nMath Library\nIf there are any references which are of the form Math.cos(2) or references which require the common Math library, on evaluation of the reference, if it is not found in the look-up object then the reference will be looked up in the Mathlibrary as well. That is of course if the look-up in the reference object fails. Even for the methods in Math library, the parameters are evaluated first before being passed to the method, so the expression \nMath.cos( 2 + f1.notAFunction )\nis still valid.\nRegular Expressions\nThe regular expressions used in this project can be found in regexContainer.ts file in the RegexContainer class.\n|Regex|Name|Description|\n|-|-|-|\n|/^[)]$/|ClosingParenthesis|Close parenthesis or )|\n|/^[0-9]$/|Digit|All digits from 0 to 9|\n|/^[(]$/|OpeningParenthesis|Open parenthesis or (|\n|/^[-+*/]$/|Operator|The common arithmetic operators of addition, subtraction, multiplication and division.|\n|/^([a-zA-Z0-9_$]+(\\.[a-zA-Z0-9_$]+)*)$/|ReferenceName|A reference name is of the form name.name.name.name, where . is the separator and name can be a string of uppercase or lowercase characters, digits, $ or _. A reference name must start with any one of these characters and must have at least one of these characters.|\n|/^[a-zA-Z0-9$_.]$/|ReferenceNameCharacters|The characters that are valid in a reference name.|\n|/^[a-zA-Z$]$/|ReferenceNameInitial|The valid starting characters of a reference name.|\nTransition Check\nSince the project requires parsing a string, so intuitively there will be a requirement of a transition table. The transition, in this case, performs check on whether a character following or succeeding a token forms a valid expression. The TransitionCheck method, in transitionCheck.ts, is an implementation of this concept. The parameters of the method are:\n|Parameter|Type|Description|\n|-|-|-|\n|currentToken|DMEToken|The token that was generated in the current iteration.|\n|next|string|The character following the currentToken in the expression.|\nThis method returns true when the transition from the token to the character is valid or false if invalid. The method uses regular expression which will are self-explanatory.\nAlgorithm\nThe algorithm used for evaluating the expression can be found in this page. The algorithm evaluates infix expression using two stacks, one for operands and one for operators.\nThe method evaluateNativeExpression implements the algorithm.\nNative Expression - A native expression is one where there are only operands, operators and parenthesis in the expression. In other words, there are no reference tokens in the expression.\nDocumentation\nPlease refer to doc/index.html for the complete documentation and API reference. The documentation for this project was generated using Compodoc.\nDemo\n```typescript\n// Expression string\nlet exp : string = \"a + (1+1.1)/2+$f.$r.w_t_($f.x(2),3) + (-2) + Math.cos(90)\";\n// Reference object\nlet ref : any = {\n    \"$f\": {\n        \"$r\": {\n            \"w_t_\": function( params : number[] ) : number {\n                return params[0] + params[1];\n            }\n        },\n        \"x\": function( params : number[] ) : number {\n            return params[0] * params[0];\n        },\n        \"a\": 2\n    },\n    \"a\": 1\n};\n// Getting the array of tokens\nlet tokens = DLMathEval.tokenize(exp);\n// Evaluating the expression\nlet result = DLMathEval.evaluateExpression(exp, ref);\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Dame Lyngdoh\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TransitionCheck   (transitionCheck.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    transitionCheck.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TransitionCheck\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : function( currentToken : DMEToken, next : string ) : boolean {\n    let nextRegex : RegExp = /[0]/;\n\n    switch(currentToken.type) {\n        case DMETokenType.Operand:\n            nextRegex = /^[-+*/)]$/\n            break;\n        case DMETokenType.Operator:\n            nextRegex = /^[(0-9a-zA-Z$]$/\n            break;\n        case DMETokenType.OpenParenthesis:\n            nextRegex = /^[-0-9a-zA-Z]$/\n            break;\n        case DMETokenType.CloseParenthesis:\n            nextRegex = /^[-+*/]$/\n            break;\n        case DMETokenType.Reference:\n            nextRegex = /^[-+*/)]$/\n            break;\n        default:\n            throw new Error('Unrecognized TokenType value.');\n    }\n    \n    try{\n        return nextRegex.test(next);\n    }\n    catch(ex) {\n        throw ex;\n    }\n}\n                        \n                    \n\n                \n                    \n                        Performs a check against a transition table through the use of regular expressions.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
